// <auto-generated />
using System;
using BookIt.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookIt.API.Migrations
{
    [DbContext(typeof(BookItDbContext))]
    [Migration("20241007105639_Adding capacity and available tickets in events")]
    partial class Addingcapacityandavailableticketsinevents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookIt.API.Models.Domain.Booking", b =>
                {
                    b.Property<Guid>("booking_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("booking_dateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("number_of_tickets")
                        .HasColumnType("int");

                    b.Property<double>("total_price")
                        .HasColumnType("float");

                    b.HasKey("booking_id");

                    b.HasIndex("EventId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookIt.API.Models.Domain.Event", b =>
                {
                    b.Property<Guid>("event_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("artist")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("available_tickets")
                        .HasColumnType("int");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("end_time")
                        .HasColumnType("time");

                    b.Property<string>("event_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<TimeOnly>("start_time")
                        .HasColumnType("time");

                    b.HasKey("event_id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            event_id = new Guid("9443d1cc-c761-4984-a1a8-837adfde4387"),
                            artist = "Parmish Verma",
                            available_tickets = 250,
                            capacity = 250,
                            category = "Festive celebration",
                            date = new DateOnly(2024, 10, 1),
                            description = "Diwali Celebration",
                            end_time = new TimeOnly(10, 0, 0),
                            event_name = "Pre-Diwali Bash",
                            location = "Delhi",
                            price = 1000.0,
                            start_time = new TimeOnly(9, 0, 0)
                        });
                });

            modelBuilder.Entity("BookIt.API.Models.Domain.Booking", b =>
                {
                    b.HasOne("BookIt.API.Models.Domain.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });
#pragma warning restore 612, 618
        }
    }
}
